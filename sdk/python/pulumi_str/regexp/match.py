# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MatchResult',
    'AwaitableMatchResult',
    'match',
    'match_output',
]

@pulumi.output_type
class MatchResult:
    def __init__(__self__, matches=None):
        if matches and not isinstance(matches, bool):
            raise TypeError("Expected argument 'matches' to be a bool")
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter
    def matches(self) -> bool:
        return pulumi.get(self, "matches")


class AwaitableMatchResult(MatchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return MatchResult(
            matches=self.matches)


def match(pattern: Optional[str] = None,
          string: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableMatchResult:
    """
    Match reports whether the string s contains any match of the regular expression pattern.
    """
    __args__ = dict()
    __args__['pattern'] = pattern
    __args__['string'] = string
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('str:regexp:match', __args__, opts=opts, typ=MatchResult).value

    return AwaitableMatchResult(
        matches=__ret__.matches)


@_utilities.lift_output_func(match)
def match_output(pattern: Optional[pulumi.Input[str]] = None,
                 string: Optional[pulumi.Input[str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[MatchResult]:
    """
    Match reports whether the string s contains any match of the regular expression pattern.
    """
    ...
