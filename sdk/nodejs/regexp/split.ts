// *** WARNING: this file was generated by pulumi-gen-str. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Split a string on a regex.
 */
export function split(args: SplitArgs, opts?: pulumi.InvokeOptions): Promise<SplitResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("str:regexp:split", {
        "count": args.count,
        "on": args.on,
        "string": args.string,
    }, opts);
}

export interface SplitArgs {
    /**
     * `count` determines the number of substrings to return. 
     * If `count` is not provided, it defaults to substrings.
     * If `count` is provided then the last substring will be the unsplit remainder.
     * It is an error to pass `count < 1`.
     */
    count?: number;
    /**
     * The regex to split on.
     */
    on: string;
    /**
     * The string on which to split.
     */
    string: string;
}

export interface SplitResult {
    /**
     * The result of the string split.
     */
    readonly result: string[];
}

export function splitOutput(args: SplitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SplitResult> {
    return pulumi.output(args).apply(a => split(a, opts))
}

export interface SplitOutputArgs {
    /**
     * `count` determines the number of substrings to return. 
     * If `count` is not provided, it defaults to substrings.
     * If `count` is provided then the last substring will be the unsplit remainder.
     * It is an error to pass `count < 1`.
     */
    count?: pulumi.Input<number>;
    /**
     * The regex to split on.
     */
    on: pulumi.Input<string>;
    /**
     * The string on which to split.
     */
    string: pulumi.Input<string>;
}
