// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A regex based replace on a string.
 *
 * The underlying regexp engine is the go "regexp" stdlib package.
 * You can see details at for available patterns at https://pkg.go.dev/regexp/syntax.
 */
export function replace(args: ReplaceArgs, opts?: pulumi.InvokeOptions): Promise<ReplaceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("str:regexp:replace", {
        "new": args.new,
        "old": args.old,
        "string": args.string,
    }, opts);
}

export interface ReplaceArgs {
    /**
     * The new string.
     *
     * Note: Inside repl, "$" signs are interpreted as an Expand, so for instance
     * $1 represents the text of the first submatch. 
     */
    new: string;
    /**
     * The regular expression to match against.
     */
    old: string;
    /**
     * The string to operate over.
     */
    string: string;
}

export interface ReplaceResult {
    /**
     * The input "string" where each pattern matching "old" is replaced by "new".
     */
    readonly result: string;
}

export function replaceOutput(args: ReplaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ReplaceResult> {
    return pulumi.output(args).apply(a => replace(a, opts))
}

export interface ReplaceOutputArgs {
    /**
     * The new string.
     *
     * Note: Inside repl, "$" signs are interpreted as an Expand, so for instance
     * $1 represents the text of the first submatch. 
     */
    new: pulumi.Input<string>;
    /**
     * The regular expression to match against.
     */
    old: pulumi.Input<string>;
    /**
     * The string to operate over.
     */
    string: pulumi.Input<string>;
}
