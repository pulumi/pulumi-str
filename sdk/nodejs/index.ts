// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReplaceArgs, ReplaceResult, ReplaceOutputArgs } from "./replace";
export const replace: typeof import("./replace").replace = null as any;
export const replaceOutput: typeof import("./replace").replaceOutput = null as any;
utilities.lazyLoad(exports, ["replace","replaceOutput"], () => require("./replace"));

export { TrimPrefixArgs, TrimPrefixResult, TrimPrefixOutputArgs } from "./trimPrefix";
export const trimPrefix: typeof import("./trimPrefix").trimPrefix = null as any;
export const trimPrefixOutput: typeof import("./trimPrefix").trimPrefixOutput = null as any;
utilities.lazyLoad(exports, ["trimPrefix","trimPrefixOutput"], () => require("./trimPrefix"));

export { TrimSuffixArgs, TrimSuffixResult, TrimSuffixOutputArgs } from "./trimSuffix";
export const trimSuffix: typeof import("./trimSuffix").trimSuffix = null as any;
export const trimSuffixOutput: typeof import("./trimSuffix").trimSuffixOutput = null as any;
utilities.lazyLoad(exports, ["trimSuffix","trimSuffixOutput"], () => require("./trimSuffix"));


// Export sub-modules:
import * as regexp from "./regexp";

export {
    regexp,
};
pulumi.runtime.registerResourcePackage("str", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:str") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
