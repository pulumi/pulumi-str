// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Replace returns a copy of the string s with all
 * non-overlapping instances of old replaced by new.
 * If old is empty, it matches at the beginning of the string
 * and after each UTF-8 sequence, yielding up to k+1 replacements
 * for a k-rune string.
 */
export function replace(args: ReplaceArgs, opts?: pulumi.InvokeOptions): Promise<ReplaceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("str:index:replace", {
        "new": args.new,
        "old": args.old,
        "string": args.string,
    }, opts);
}

export interface ReplaceArgs {
    new: string;
    old: string;
    string: string;
}

export interface ReplaceResult {
    readonly result: string;
}

export function replaceOutput(args: ReplaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ReplaceResult> {
    return pulumi.output(args).apply(a => replace(a, opts))
}

export interface ReplaceOutputArgs {
    new: pulumi.Input<string>;
    old: pulumi.Input<string>;
    string: pulumi.Input<string>;
}
