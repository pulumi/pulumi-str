// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package regexp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Split a string on a regex.
func Split(ctx *pulumi.Context, args *SplitArgs, opts ...pulumi.InvokeOption) (*SplitResult, error) {
	var rv SplitResult
	err := ctx.Invoke("str:regexp:split", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SplitArgs struct {
	// `count` determines the number of substrings to return.
	// If `count` is not provided, it defaults to substrings.
	// If `count` is provided then the last substring will be the unsplit remainder.
	// It is an error to pass `count < 1`.
	Count *int `pulumi:"count"`
	// The regex to split on.
	On string `pulumi:"on"`
	// The string on which to split.
	String string `pulumi:"string"`
}

type SplitResult struct {
	// The result of the string split.
	Result []string `pulumi:"result"`
}

func SplitOutput(ctx *pulumi.Context, args SplitOutputArgs, opts ...pulumi.InvokeOption) SplitResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SplitResult, error) {
			args := v.(SplitArgs)
			r, err := Split(ctx, &args, opts...)
			var s SplitResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SplitResultOutput)
}

type SplitOutputArgs struct {
	// `count` determines the number of substrings to return.
	// If `count` is not provided, it defaults to substrings.
	// If `count` is provided then the last substring will be the unsplit remainder.
	// It is an error to pass `count < 1`.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The regex to split on.
	On pulumi.StringInput `pulumi:"on"`
	// The string on which to split.
	String pulumi.StringInput `pulumi:"string"`
}

func (SplitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SplitArgs)(nil)).Elem()
}

type SplitResultOutput struct{ *pulumi.OutputState }

func (SplitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SplitResult)(nil)).Elem()
}

func (o SplitResultOutput) ToSplitResultOutput() SplitResultOutput {
	return o
}

func (o SplitResultOutput) ToSplitResultOutputWithContext(ctx context.Context) SplitResultOutput {
	return o
}

// The result of the string split.
func (o SplitResultOutput) Result() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SplitResult) []string { return v.Result }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(SplitResultOutput{})
}
