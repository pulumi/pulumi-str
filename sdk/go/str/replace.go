// Code generated by pulumi-gen-str DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package str

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Replace returns a copy of the string s with all
// non-overlapping instances of old replaced by new.
// If old is empty, it matches at the beginning of the string
// and after each UTF-8 sequence, yielding up to k+1 replacements
// for a k-rune string.
func Replace(ctx *pulumi.Context, args *ReplaceArgs, opts ...pulumi.InvokeOption) (*ReplaceResult, error) {
	var rv ReplaceResult
	err := ctx.Invoke("str:index:replace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ReplaceArgs struct {
	New    string `pulumi:"new"`
	Old    string `pulumi:"old"`
	String string `pulumi:"string"`
}

type ReplaceResult struct {
	Result string `pulumi:"result"`
}

func ReplaceOutput(ctx *pulumi.Context, args ReplaceOutputArgs, opts ...pulumi.InvokeOption) ReplaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ReplaceResult, error) {
			args := v.(ReplaceArgs)
			r, err := Replace(ctx, &args, opts...)
			var s ReplaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ReplaceResultOutput)
}

type ReplaceOutputArgs struct {
	New    pulumi.StringInput `pulumi:"new"`
	Old    pulumi.StringInput `pulumi:"old"`
	String pulumi.StringInput `pulumi:"string"`
}

func (ReplaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplaceArgs)(nil)).Elem()
}

type ReplaceResultOutput struct{ *pulumi.OutputState }

func (ReplaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplaceResult)(nil)).Elem()
}

func (o ReplaceResultOutput) ToReplaceResultOutput() ReplaceResultOutput {
	return o
}

func (o ReplaceResultOutput) ToReplaceResultOutputWithContext(ctx context.Context) ReplaceResultOutput {
	return o
}

func (o ReplaceResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ReplaceResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplaceResultOutput{})
}
